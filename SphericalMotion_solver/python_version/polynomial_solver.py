import numpy as np
from sympy import Matrix

def solve_spherical_polynomial(u, v):
    # u is observations in the first frame (3xN)
    # v is observations in the second frame (3xN)
    # E is a 3x3x4 matrix of essential matrix solutions

    if u.shape[0] != 3 or v.shape[0] != 3 or u.shape[1] != v.shape[1]:
        raise ValueError('u and v must be size 3xN')

    # build matrix of linear constraints
    N = u.shape[1]
    coeffs = np.zeros((N, 6))
    for i in range(N):
        coeffs[i, :] = get_row(u[:, i], v[:, i])

    # get null space
    _, _, Vt = np.linalg.svd(coeffs)
    B = Vt[3:6].T
    B = np.array(B)


    # build matrix A of non-linear constraints
    t2 = B[0, 0]**2
    t3 = 2 * t2
    t4 = B[1, 0]**2
    t5 = 2 * t4
    t6 = B[3, 0]**2
    t7 = 2 * t6
    t8 = t3 + t5 + t7
    t9 = B[2, 0]**2
    t10 = B[4, 0]**2
    t11 = B[5, 0]**2
    t12 = t3 + t5 + t6 + t9 + t10 + t11
    t13 = 4 * B[0, 0] * B[0, 1]
    t14 = 4 * B[1, 0] * B[1, 1]
    t15 = 2 * B[0, 0] * B[5, 0]
    t66 = 2 * B[1, 0] * B[4, 0]
    t16 = t15 - t66
    t17 = 2 * B[2, 0] * B[2, 1]
    t18 = 2 * B[3, 0] * B[3, 1]
    t19 = 2 * B[4, 0] * B[4, 1]
    t20 = 2 * B[5, 0] * B[5, 1]
    t21 = t13 + t14 + t17 + t18 + t19 + t20
    t22 = B[0, 1]**2
    t23 = 2 * t22
    t24 = B[1, 1]**2
    t25 = 2 * t24
    t26 = B[3, 1]**2
    t27 = 2 * B[0, 0] * B[5, 1]
    t28 = 2 * B[0, 1] * B[5, 0]
    t72 = 2 * B[1, 0] * B[4, 1]
    t73 = 2 * B[1, 1] * B[4, 0]
    t29 = t27 + t28 - t72 - t73
    t30 = 4 * B[3, 0] * B[3, 1]
    t31 = t13 + t14 + t30
    t32 = B[0, 0] * B[2, 1]
    t33 = B[0, 1] * B[2, 0]
    t34 = t32 + t33
    t35 = 2 * t26
    t36 = t23 + t25 + t35
    t37 = B[2, 1]**2
    t38 = B[4, 1]**2
    t39 = B[5, 1]**2
    t40 = t23 + t25 + t26 + t37 + t38 + t39
    t41 = 2 * B[0, 1] * B[5, 1]
    t45 = 2 * B[1, 1] * B[4, 1]
    t42 = t41 - t45
    t43 = 4 * B[0, 1] * B[0, 2]
    t44 = 4 * B[1, 1] * B[1, 2]
    t46 = 2 * B[2, 1] * B[2, 2]
    t47 = 2 * B[3, 1] * B[3, 2]
    t48 = 2 * B[4, 1] * B[4, 2]
    t49 = 2 * B[5, 1] * B[5, 2]
    t50 = t43 + t44 + t46 + t47 + t48 + t49
    t51 = B[0, 2]**2
    t52 = 2 * t51
    t53 = B[1, 2]**2
    t54 = 2 * t53
    t55 = B[3, 2]**2
    t56 = 2 * B[0, 1] * B[5, 2]
    t57 = 2 * B[0, 2] * B[5, 1]
    t77 = 2 * B[1, 1] * B[4, 2]
    t78 = 2 * B[1, 2] * B[4, 1]
    t58 = t56 + t57 - t77 - t78
    t59 = 4 * B[3, 1] * B[3, 2]
    t60 = t43 + t44 + t59
    t61 = B[0, 1] * B[2, 2]
    t62 = B[0, 2] * B[2, 1]
    t63 = t61 + t62
    t64 = 4 * B[0, 0] * B[0, 2]
    t65 = 4 * B[1, 0] * B[1, 2]
    t67 = 2 * B[2, 0] * B[2, 2]
    t68 = 2 * B[3, 0] * B[3, 2]
    t69 = 2 * B[4, 0] * B[4, 2]
    t70 = 2 * B[5, 0] * B[5, 2]
    t71 = t64 + t65 + t67 + t68 + t69 + t70
    t74 = 2 * B[0, 0] * B[5, 2]
    t75 = 2 * B[0, 2] * B[5, 0]
    t90 = 2 * B[1, 0] * B[4, 2]
    t91 = 2 * B[1, 2] * B[4, 0]
    t76 = t74 + t75 - t90 - t91
    t79 = 4 * B[3, 0] * B[3, 2]
    t80 = t64 + t65 + t79
    t81 = B[0, 0] * B[2, 2]
    t82 = B[0, 2] * B[2, 0]
    t83 = t81 + t82
    t84 = 2 * t55
    t85 = t52 + t54 + t84
    t86 = B[2, 2]**2
    t87 = B[4, 2]**2
    t88 = B[5, 2]**2
    t89 = t52 + t54 + t55 + t86 + t87 + t88
    t92 = 2 * B[0, 2] * B[5, 2]
    t94 = 2 * B[1, 2] * B[4, 2]
    t93 = t92 - t94
    t95 = 2 * t10
    t96 = 2 * t11
    t97 = t95 + t96
    t98 = 2 * B[0, 0] * B[4, 0]
    t99 = 2 * B[1, 0] * B[5, 0]
    t100 = t98 + t99
    t101 = 2 * B[0, 0] * B[4, 1]
    t102 = 2 * B[0, 1] * B[4, 0]
    t103 = 2 * B[1, 0] * B[5, 1]
    t104 = 2 * B[1, 1] * B[5, 0]
    t105 = t101 + t102 + t103 + t104
    t106 = 4*B[4, 0]*B[4, 1]
    t107 = 4*B[5, 0]*B[5, 1]
    t108 = t106 + t107
    t109 = 2*t38
    t110 = 2*t39
    t111 = t109 + t110
    t112 = 2*B[0, 1]*B[4, 1]
    t113 = 2*B[1, 1]*B[5, 1]
    t114 = t112 + t113
    t115 = 2*B[0, 1]*B[4, 2]
    t116 = 2*B[0, 2]*B[4, 1]
    t117 = 2*B[1, 1]*B[5, 2]
    t118 = 2*B[1, 2]*B[5, 1]
    t119 = t115 + t116 + t117 + t118
    t120 = 4*B[4, 1]*B[4, 2]
    t121 = 4*B[5, 1]*B[5, 2]
    t122 = t120 + t121
    t123 = 2*B[0, 0]*B[4, 2]
    t124 = 2*B[0, 2]*B[4, 0]
    t125 = 2*B[1, 0]*B[5, 2]
    t126 = 2*B[1, 2]*B[5, 0]
    t127 = t123 + t124 + t125 + t126
    t128 = 4*B[4, 0]*B[4, 2]
    t129 = 4*B[5, 0]*B[5, 2]
    t130 = t128 + t129
    t131 = 2*t87
    t132 = 2*t88
    t133 = t131 + t132
    t134 = 2*B[0, 2]*B[4, 2]
    t135 = 2*B[1, 2]*B[5, 2]
    t136 = t134 + t135
    t137 = B[1, 0]*B[2, 1]
    t138 = B[1, 1]*B[2, 0]
    t139 = t137 + t138
    t140 = B[1, 1]*B[2, 2]
    t141 = B[1, 2]*B[2, 1]
    t142 = t140 + t141
    t143 = B[1, 0]*B[2, 2]
    t144 = B[1, 2]*B[2, 0]
    t145 = t143 + t144
    # build final matrix of constraints
    A = np.array([[B[0,-1]*t8 - B[0,-1]*t12 - B[3,-1]*t16 + 2*B[-1,-1]*B[1,-1]*B[2,-1], B[0,0]*t8 - B[0,0]*t12 - B[0,-1]*t21 + B[0,-1]*t31 - B[3,0]*t16 + 2*B[2,-1]*t34 - B[3,-1]*t29 + 2*B[-1,-1]*B[1,-1]*B[2,0], B[0,0]*t31 - B[0,0]*t21 + B[0,-1]*t36 - B[0,-1]*t40 + 2*B[2,0]*t34 - B[3,0]*t29 - B[3,-1]*t42 + 2*B[-1,0]*B[1,0]*B[2,-1], B[0,0]*t36 - B[0,0]*t40 - B[3,0]*t42 + 2*B[-1,0]*B[1,0]*B[2,0], B[0,1]*t36 - B[0,1]*t40 - B[0,0]*t50 + B[0,0]*t60 - B[3,1]*t42 + 2*B[2,0]*t63 - B[3,0]*t58 + 2*B[-1,0]*B[1,0]*B[2,1], B[0,1]*t60 - B[0,1]*t50 + 2*B[2,1]*t63 + B[0,0]*t85 - B[0,0]*t89 - B[3,1]*t58 - B[3,0]*t93 + 2*B[-1,1]*B[1,1]*B[2,0], B[0,1]*t8 - B[0,1]*t12 - B[3,1]*t16 - B[0,-1]*t71 + B[0,-1]*t80 + 2*B[2,-1]*t83 - B[3,-1]*t76 + 2*B[-1,-1]*B[1,-1]*B[2,1], B[0,1]*t31 - B[0,1]*t21 - B[0,-1]*t50 + 2*B[2,1]*t34 + B[0,-1]*t60 - B[3,1]*t29 - B[0,0]*t71 + B[0,0]*t80 + 2*B[2,-1]*t63 - B[3,-1]*t58 + 2*B[2,0]*t83 - B[3,0]*t76, B[0,1]*t80 - B[0,1]*t71 + B[0,-1]*t85 - B[0,-1]*t89 + 2*B[2,1]*t83 - B[3,1]*t76 - B[3,-1]*t93 + 2*B[-1,1]*B[1,1]*B[2,-1], B[0,1]*t85 - B[0,1]*t89 - B[3,1]*t93 + 2*B[-1,1]*B[1,1]*B[2,1]],

[B[-1,-1]*t100 - B[3,-1]*t12 - B[0,-1]*t16 + B[3,-1]*t97, B[-1,0]*t100 - B[0,-1]*t29 - B[3,0]*t12 - B[3,-1]*t21 - B[0,0]*t16 + B[-1,-1]*t105 + B[3,0]*t97 + B[3,-1]*t108, B[-1,0]*t105 - B[0,-1]*t42 - B[3,0]*t21 - B[3,-1]*t40 - B[0,0]*t29 + B[-1,-1]*t114 + B[3,0]*t108 + B[3,-1]*t111, B[-1,0]*t114 - B[3,0]*t40 - B[0,0]*t42 + B[3,0]*t111, B[-1,1]*t114 - B[0,0]*t58 - B[3,1]*t40 - B[3,0]*t50 - B[0,1]*t42 + B[-1,0]*t119 + B[3,1]*t111 + B[3,0]*t122, B[-1,1]*t119 - B[3,1]*t50 - B[0,0]*t93 - B[0,1]*t58 - B[3,0]*t89 + B[-1,0]*t136 + B[3,1]*t122 + B[3,0]*t133, B[-1,1]*t100 - B[3,1]*t12 - B[0,-1]*t76 - B[0,1]*t16 - B[3,-1]*t71 + B[-1,-1]*t127 + B[3,1]*t97 + B[3,-1]*t130, B[-1,1]*t105 - B[3,1]*t21 - B[0,-1]*t58 - B[0,0]*t76 - B[3,-1]*t50 - B[0,1]*t29 - B[3,0]*t71 + B[-1,-1]*t119 + B[-1,0]*t127 + B[3,1]*t108 + B[3,-1]*t122 + B[3,0]*t130, B[-1,1]*t127 - B[0,-1]*t93 - B[3,1]*t71 - B[0,1]*t76 - B[3,-1]*t89 + B[-1,-1]*t136 + B[3,1]*t130 + B[3,-1]*t133, B[-1,1]*t136 - B[3,1]*t89 - B[0,1]*t93 + B[3,1]*t133],

[B[-1,-1]*t12 - B[-1,-1]*t8 - B[4,-1]*t16 + 2*B[0,-1]*B[1,-1]*B[2,-1], B[-1,0]*t12 - B[-1,0]*t8 + B[-1,-1]*t21 - B[-1,-1]*t31 - B[4,0]*t16 - B[4,-1]*t29 + 2*B[2,-1]*t139 + 2*B[0,-1]*B[1,-1]*B[2,0], B[-1,0]*t21 - B[-1,0]*t31 - B[-1,-1]*t36 + B[-1,-1]*t40 - B[4,0]*t29 - B[4,-1]*t42 + 2*B[2,0]*t139 + 2*B[0,0]*B[1,0]*B[2,-1], B[-1,0]*t40 - B[-1,0]*t36 - B[4,0]*t42 + 2*B[0,0]*B[1,0]*B[2,0], B[-1,1]*t40 - B[-1,1]*t36 + B[-1,0]*t50 - B[-1,0]*t60 - B[4,1]*t42 - B[4,0]*t58 + 2*B[2,0]*t142 + 2*B[0,0]*B[1,0]*B[2,1], B[-1,1]*t50 - B[-1,1]*t60 - B[-1,0]*t85 + B[-1,0]*t89 - B[4,1]*t58 - B[4,0]*t93 + 2*B[2,1]*t142 + 2*B[0,1]*B[1,1]*B[2,0], B[-1,1]*t12 - B[-1,1]*t8 - B[4,1]*t16 + B[-1,-1]*t71 - B[-1,-1]*t80 - B[4,-1]*t76 + 2*B[2,-1]*t145 + 2*B[0,-1]*B[1,-1]*B[2,1], B[-1,1]*t21 - B[-1,1]*t31 + B[-1,-1]*t50 - B[-1,-1]*t60 + B[-1,0]*t71 - B[-1,0]*t80 - B[4,1]*t29 - B[4,-1]*t58 - B[4,0]*t76 + 2*B[2,1]*t139 + 2*B[2,-1]*t142 + 2*B[2,0]*t145, B[-1,1]*t71 - B[-1,1]*t80 - B[-1,-1]*t85 + B[-1,-1]*t89 - B[4,1]*t76 - B[4,-1]*t93 + 2*B[2,1]*t145 + 2*B[0,1]*B[1,1]*B[2,-1], B[-1,1]*t89 - B[-1,1]*t85 - B[4,1]*t93 + 2*B[0,1]*B[1,1]*B[2,1]],

[B[-1,-1]*t16 - B[4,-1]*t12 + B[0,-1]*t100 + B[4,-1]*t97, B[-1,0]*t16 + B[-1,-1]*t29 - B[4,0]*t12 - B[4,-1]*t21 + B[0,0]*t100 + B[0,-1]*t105 + B[4,0]*t97 + B[4,-1]*t108, B[-1,0]*t29 + B[-1,-1]*t42 - B[4,0]*t21 - B[4,-1]*t40 + B[0,0]*t105 + B[0,-1]*t114 + B[4,0]*t108 + B[4,-1]*t111, B[-1,0]*t42 - B[4,0]*t40 + B[0,0]*t114 + B[4,0]*t111, B[-1,1]*t42 + B[-1,0]*t58 - B[4,1]*t40 - B[4,0]*t50 + B[0,1]*t114 + B[0,0]*t119 + B[4,1]*t111 + B[4,0]*t122, B[-1,1]*t58 + B[-1,0]*t93 - B[4,1]*t50 + B[0,1]*t119 - B[4,0]*t89 + B[0,0]*t136 + B[4,1]*t122 + B[4,0]*t133, B[-1,1]*t16 - B[4,1]*t12 + B[-1,-1]*t76 + B[0,1]*t100 - B[4,-1]*t71 + B[0,-1]*t127 + B[4,1]*t97 + B[4,-1]*t130, B[-1,1]*t29 + B[-1,-1]*t58 - B[4,1]*t21 + B[-1,0]*t76 - B[4,-1]*t50 + B[0,1]*t105 - B[4,0]*t71 + B[0,-1]*t119 + B[0,0]*t127 + B[4,1]*t108 + B[4,-1]*t122 + B[4,0]*t130, B[-1,1]*t76 + B[-1,-1]*t93 - B[4,1]*t71 + B[0,1]*t127 - B[4,-1]*t89 + B[0,-1]*t136 + B[4,1]*t130 + B[4,-1]*t133, B[-1,1]*t93 - B[4,1]*t89 + B[0,1]*t136 + B[4,1]*t133],

[B[2,-1]*t8 + 2*B[2,-1]*t9 - B[2,-1]*t12, B[2,0]*t8 + 2*B[2,0]*t9 - B[2,0]*t12 - B[2,-1]*t21 + B[2,-1]*t31 + 4*B[1,-1]*B[1,0]*B[2,-1], B[2,0]*t31 - B[2,0]*t21 + B[2,-1]*t36 + 2*B[2,-1]*t37 - B[2,-1]*t40 + 4*B[1,-1]*B[1,0]*B[2,0], B[2,0]*t36 + 2*B[2,0]*t37 - B[2,0]*t40, B[2,1]*t36 + 2*B[2,1]*t37 - B[2,1]*t40 - B[2,0]*t50 + B[2,0]*t60 + 4*B[1,0]*B[1,1]*B[2,0], B[2,1]*t60 - B[2,1]*t50 + B[2,0]*t85 + 2*B[2,0]*t86 - B[2,0]*t89 + 4*B[1,0]*B[1,1]*B[2,1], B[2,1]*t8 + 2*B[2,1]*t9 - B[2,1]*t12 - B[2,-1]*t71 + B[2,-1]*t80 + 4*B[1,-1]*B[1,1]*B[2,-1], B[2,1]*t31 - B[2,1]*t21 - B[2,-1]*t50 + B[2,-1]*t60 - B[2,0]*t71 + B[2,0]*t80 + 4*B[1,-1]*B[1,0]*B[2,1] + 4*B[1,-1]*B[1,1]*B[2,0] + 4*B[1,0]*B[1,1]*B[2,-1], B[2,1]*t80 - B[2,1]*t71 + B[2,-1]*t85 + 2*B[2,-1]*t86 - B[2,-1]*t89 + 4*B[1,-1]*B[1,1]*B[2,1], B[2,1]*t85 + 2*B[2,1]*t86 - B[2,1]*t89],

[B[1,-1]*t100 - B[2,-1]*t16, B[1,0]*t100 - B[2,-1]*t29 - B[2,0]*t16 + B[1,-1]*t105, B[1,0]*t105 - B[2,-1]*t42 - B[2,0]*t29 + B[1,-1]*t114, B[1,0]*t114 - B[2,0]*t42, B[1,1]*t114 - B[2,0]*t58 - B[2,1]*t42 + B[1,0]*t119, B[1,1]*t119 - B[2,0]*t93 - B[2,1]*t58 + B[1,0]*t136, B[1,1]*t100 - B[2,-1]*t76 - B[2,1]*t16 + B[1,-1]*t127, B[1,1]*t105 - B[2,-1]*t58 - B[2,0]*t76 - B[2,1]*t29 + B[1,-1]*t119 + B[1,0]*t127, B[1,1]*t127 - B[2,-1]*t93 - B[2,1]*t76 + B[1,-1]*t136, B[1,1]*t136 - B[2,1]*t93]])


    G = Matrix(A).rref()[0]  # sympy로 rref 형태로 변환
    G = np.array(G[:, 6:10].tolist()).astype(np.float64)  # 열 7부터 10까지 가져와 numpy 배열로 변환

# Build polynomial in y
    ypoly_coeffs = [
        G[4, 0] * G[5, 1] - G[4, 1] * G[5, 0],
        G[3, 1] * G[5, 0] - G[3, 0] * G[5, 1] + G[4, 0] * G[5, 2] - G[4, 2] * G[5, 0],
        G[3, 2] * G[5, 0] - G[3, 1] * G[4, 0] + G[3, 0] * (G[4, 1] - G[5, 2]),
        G[3, 0] * (G[4, 2] + G[4, 1] * G[5, 3] - G[4, 3] * G[5, 1]) + G[3, 3] * (G[4, 0] * G[5, 1] - G[4, 1] * G[5, 0]) - G[3, 1] * (G[4, 0] * G[5, 3] - G[4, 3] * G[5, 0]) - G[3, 2] * G[4, 0],
        G[3, 3] * (G[4, 0] * G[5, 2] - G[4, 2] * G[5, 0]) - G[3, 2] * (G[4, 0] * G[5, 3] - G[4, 3] * G[5, 0]) + G[3, 0] * (G[4, 2] * G[5, 3] - G[4, 3] * G[5, 2])
    ]

# Find roots of polynomial
    ysolns = np.roots(ypoly_coeffs)
    
    E = np.zeros((3, 3, 4))
    
    for i in range(4):
        y = ysolns[i]
        N = np.array([
            [G[3, 0], G[3, 2] + G[3, 1] * y, G[3, 3] + y**3],
            [G[4, 0], G[4, 2] + G[4, 1] * y, G[4, 3] + y**2],
            [G[5, 0], G[5, 2] + G[5, 1] * y, G[5, 3] + y]
        ])
        
        # Perform SVD on N and get the last column of V (right singular vectors)
        _, _, V = np.linalg.svd(N)
        xsoln = V[:, -1]
        x = xsoln[1] / xsoln[2]
        xysoln = np.array([x, y, 1])
        
        e = B @ xysoln
        myE = np.array([
            [e[0], e[1], e[2]],
            [e[1], -e[0], e[3]],
            [e[4], e[5], 0]
        ])
        
        # Normalize myE and store it in E
        E[:, :, i] = myE / np.linalg.norm(myE)
    return E

def get_row(u, v):
    row = [
        u[0] * v[0] - u[1] * v[1], 
        u[0] * v[1] + u[1] * v[0], 
        u[2] * v[0], 
        u[2] * v[1], 
        u[0] * v[2], 
        u[1] * v[2]
    ]
    return row
