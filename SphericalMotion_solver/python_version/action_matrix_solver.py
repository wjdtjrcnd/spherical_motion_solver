import numpy as np
from scipy.linalg import rq
from scipy.linalg import eig

def get_row(u, v):
    # Function to get a row for linear constraints
    return np.array([
        u[0] * v[0], u[0] * v[1], u[0], u[1] * v[0], u[1] * v[1], u[1]
    ])

def solve_spherical_action_matrix(u, v):
    # u is observations in first frame (3xN)
    # v is observations in second frame (3xN)
    # E is 3x3x4 matrix of essential matrix solutions
    
    if u.shape[0] != 3 or v.shape[0] != 3 or u.shape[1] != v.shape[1]:
        raise ValueError('u and v must be size 3xN')
    
    # Build matrix of linear constraints
    N = u.shape[1]
    coeffs = np.zeros((N, 6))
    for i in range(N):
        coeffs[i, :] = get_row(u[:, i], v[:, i])
    
    # Get null space
    _, _, V = np.linalg.svd(coeffs)
    B = V[:, 3:6]

    # Build matrix A of non-linear constraints
    t2 = B[0, 0] ** 2
    t3 = 2 * t2
    t4 = B[1, 0] ** 2
    t5 = 2 * t4
    t6 = B[3, 0] ** 2
    t7 = 2 * t6
    t8 = t3 + t5 + t7
    t9 = B[2, 0] ** 2
    t10 = B[4, 0] ** 2
    t11 = B[5, 0] ** 2
    t12 = t3 + t5 + t6 + t9 + t10 + t11
    t13 = 4 * B[0, 0] * B[0, 1]
    t14 = 4 * B[1, 0] * B[1, 1]
    t15 = 2 * B[0, 0] * B[5, 0]
    t45 = 2 * B[1, 0] * B[4, 0]
    t16 = t15 - t45
    t17 = 2 * B[2, 0] * B[2, 1]
    t18 = 2 * B[3, 0] * B[3, 1]
    t19 = 2 * B[4, 0] * B[4, 1]
    t20 = 2 * B[5, 0] * B[5, 1]
    t21 = t13 + t14 + t17 + t18 + t19 + t20
    t22 = B[0, 1] ** 2
    t23 = 2 * t22
    t24 = B[1, 1] ** 2
    t25 = 2 * t24
    t26 = B[3, 1] ** 2
    t27 = 2 * B[0, 0] * B[5, 1]
    t28 = 2 * B[0, 1] * B[5, 0]
    t51 = 2 * B[1, 0] * B[4, 1]
    t52 = 2 * B[1, 1] * B[4, 0]
    t29 = t27 + t28 - t51 - t52
    t30 = 4 * B[3, 0] * B[3, 1]
    t31 = t13 + t14 + t30
    t32 = B[0, 0] * B[2, 1]
    t33 = B[0, 1] * B[2, 0]
    t34 = t32 + t33
    t35 = 2 * t26
    t36 = t23 + t25 + t35
    t37 = B[2, 1] ** 2
    t38 = B[4, 1] ** 2
    t39 = B[5, 1] ** 2
    t40 = t23 + t25 + t26 + t37 + t38 + t39
    t41 = 2 * B[0, 1] * B[5, 1]
    t76 = 2 * B[1, 1] * B[4, 1]
    t42 = t41 - t76
    t43 = 4 * B[0, 0] * B[0, 2]
    t44 = 4 * B[1, 0] * B[1, 2]
    t46 = 2 * B[2, 0] * B[2, 2]
    t47 = 2 * B[3, 0] * B[3, 2]
    t48 = 2 * B[4, 0] * B[4, 2]
    t49 = 2 * B[5, 0] * B[5, 2]
    t50 = t43 + t44 + t46 + t47 + t48 + t49
    t53 = 2 * B[0, 0] * B[5, 2]
    t54 = 2 * B[0, 2] * B[5, 0]
    t82 = 2 * B[1, 0] * B[4, 2]
    t83 = 2 * B[1, 2] * B[4, 0]
    t55 = t53 + t54 - t82 - t83
    t56 = 4 * B[3, 0] * B[3, 2]
    t57 = t43 + t44 + t56
    t58 = 4 * B[0, 1] * B[0, 2]
    t59 = 4 * B[1, 1] * B[1, 2]
    t60 = B[0, 0] * B[2, 2]
    t61 = B[0, 2] * B[2, 0]
    t62 = t60 + t61
    t63 = 2 * B[2, 1] * B[2, 2]
    t64 = 2 * B[3, 1] * B[3, 2]
    t65 = 2 * B[4, 1] * B[4, 2]
    t66 = 2 * B[5, 1] * B[5, 2]
    t67 = t58 + t59 + t63 + t64 + t65 + t66
    t68 = 2 * B[0, 1] * B[5, 2]
    t69 = 2 * B[0, 2] * B[5, 1]
    t90 = 2 * B[1, 1] * B[4, 2]
    t91 = 2 * B[1, 2] * B[4, 1]
    t70 = t68 + t69 - t90 - t91
    t71 = 4 * B[3, 1] * B[3, 2]
    t72 = t58 + t59 + t71
    t73 = B[0, 1] * B[2, 2]
    t74 = B[0, 2] * B[2, 1]
    t75 = t73 + t74
    t77 = B[0, 2] ** 2
    t78 = 2 * t77
    t79 = B[1, 2] ** 2
    t80 = 2 * t79
    t81 = B[3, 2] ** 2
    t84 = 2 * t81
    t85 = t78 + t80 + t84
    t86 = B[2, 2] ** 2
    t87 = B[4, 2] ** 2
    t88 = B[5, 2] ** 2
    t89 = t78 + t80 + t81 + t86 + t87 + t88
    t92 = 2 * B[0, 2] * B[5, 2]
    t94 = 2 * B[1, 2] * B[4, 2]
    t93 = t92 - t94
    t95 = 2 * t10
    t96 = 2 * t11
    t97 = t95 + t96
    t98 = 2 * B[0, 0] * B[4, 0]
    t99 = 2 * B[1, 0] * B[5, 0]
    t100 = 2 * B[0, 0] * B[5, 0]
    t101 = 2 * B[1, 0] * B[4, 0]
    t102 = 2 * B[2, 0] * B[3, 0]
    t103 = t98 + t99 - t100 - t101 - t102
    t104 = 2 * B[0, 1] * B[4, 1]
    t105 = 2 * B[1, 1] * B[5, 1]
    t106 = 2 * B[0, 1] * B[5, 1]
    t107 = 2 * B[1, 1] * B[4, 1]
    t108 = 2 * B[2, 1] * B[3, 1]
    t109 = t104 + t105 - t106 - t107 - t108
    t110 = 4 * B[2, 0] * B[2, 1]
    t111 = 4 * B[3, 0] * B[3, 1]
    t112 = 2 * B[0, 1] * B[2, 0]
    t113 = 2 * B[1, 1] * B[2, 0]
    t114 = 2 * B[0, 0] * B[2, 1]
    t115 = 2 * B[1, 0] * B[2, 1]
    t116 = t110 + t111 + t112 + t113 + t114 + t115
    t117 = 2 * B[1, 0] * B[5, 2]
    t118 = 2 * B[1, 2] * B[5, 0]
    t119 = t115 + t116 + t117 + t118
    t120 = 4 * B[4, 0] * B[4, 2]
    t121 = 4 * B[5, 0] * B[5, 2]
    t122 = t120 + t121
    t123 = 2 * B[0, 1] * B[4, 2]
    t124 = 2 * B[0, 2] * B[4, 1]
    t125 = 2 * B[1, 1] * B[5, 2]
    t126 = 2 * B[1, 2] * B[5, 1]
    t127 = t123 + t124 + t125 + t126
    t128 = 4 * B[4, 1] * B[4, 2]
    t129 = 4 * B[5, 1] * B[5, 2]
    t130 = t128 + t129
    t131 = 2 * t87
    t132 = 2 * t88
    t133 = t131 + t132
    t134 = 2 * B[0, 2] * B[4, 2]
    t135 = 2 * B[1, 2] * B[5, 2]
    t136 = t134 + t135
    t137 = B[1, 0] * B[2, 1]
    t138 = B[1, 1] * B[2, 0]
    t139 = t137 + t138
    t140 = B[1, 0] * B[2, 2]
    t141 = B[1, 2] * B[2, 0]
    t142 = t140 + t141
    t143 = B[1, 1] * B[2, 2]
    t144 = B[1, 2] * B[2, 1]
    t145 = t143 + t144
    # Form the final matrix
    A = [[B[1, 0]*t8 - B[1, 0]*t12 - B[4, 0]*t16 + 2*B[0, 0]*B[2, 0]*B[3, 0], B[1, 1]*t8 - B[1, 1]*t12 - B[1, 0]*t21 + B[1, 0]*t31 - B[4, 1]*t16 + 2*B[3, 0]*t34 - B[4, 0]*t29 + 2*B[0, 0]*B[2, 0]*B[3, 1], B[1, 1]*t31 - B[1, 1]*t21 + B[1, 0]*t36 - B[1, 0]*t40 + 2*B[3, 1]*t34 - B[4, 1]*t29 - B[4, 0]*t42 + 2*B[0, 1]*B[2, 1]*B[3, 0], B[1, 1]*t36 - B[1, 1]*t40 - B[4, 1]*t42 + 2*B[0, 1]*B[2, 1]*B[3, 1], B[1, 2]*t8 - B[1, 2]*t12 - B[4, 2]*t16 - B[1, 0]*t50 + B[1, 0]*t57 + 2*B[3, 0]*t62 - B[4, 0]*t55 + 2*B[0, 0]*B[2, 0]*B[3, 2], B[1, 2]*t31 - B[1, 2]*t21 - B[1, 1]*t50 + 2*B[3, 2]*t34 + B[1, 1]*t57 - B[4, 2]*t29 - B[1, 0]*t67 + B[1, 0]*t72 + 2*B[3, 1]*t62 - B[4, 1]*t55 + 2*B[3, 0]*t75 - B[4, 0]*t70, B[1, 2]*t36 - B[1, 2]*t40 - B[1, 1]*t67 + B[1, 1]*t72 - B[4, 2]*t42 + 2*B[3, 1]*t75 - B[4, 1]*t70 + 2*B[0, 1]*B[2, 1]*B[3, 2], B[1, 2]*t57 - B[1, 2]*t50 + 2*B[3, 2]*t62 + B[1, 0]*t85 - B[4, 2]*t55 - B[1, 0]*t89 - B[4, 0]*t93 + 2*B[0, 2]*B[2, 2]*B[3, 0], B[1, 2]*t72 - B[1, 2]*t67 + B[1, 1]*t85 - B[1, 1]*t89 + 2*B[3, 2]*t75 - B[4, 2]*t70 - B[4, 1]*t93 + 2*B[0, 2]*B[2, 2]*B[3, 1], B[1, 2]*t85 - B[1, 2]*t89 - B[4, 2]*t93 + 2*B[0, 2]*B[2, 2]*B[3, 2]],

[B[0, 0]*t100 - B[4, 0]*t12 - B[1, 0]*t16 + B[4, 0]*t97, B[0, 1]*t100 - B[1, 0]*t29 - B[4, 1]*t12 - B[4, 0]*t21 - B[1, 1]*t16 + B[0, 0]*t105 + B[4, 1]*t97 + B[4, 0]*t108, B[0, 1]*t105 - B[1, 0]*t42 - B[4, 1]*t21 - B[4, 0]*t40 - B[1, 1]*t29 + B[0, 0]*t114 + B[4, 1]*t108 + B[4, 0]*t111, B[0, 1]*t114 - B[4, 1]*t40 - B[1, 1]*t42 + B[4, 1]*t111, B[0, 2]*t100 - B[4, 2]*t12 - B[1, 0]*t55 - B[4, 0]*t50 - B[1, 2]*t16 + B[0, 0]*t119 + B[4, 2]*t97 + B[4, 0]*t122, B[0, 2]*t105 - B[4, 2]*t21 - B[1, 1]*t55 - B[1, 0]*t70 - B[4, 1]*t50 - B[1, 2]*t29 - B[4, 0]*t67 + B[0, 1]*t119 + B[0, 0]*t127 + B[4, 2]*t108 + B[4, 1]*t122 + B[4, 0]*t130, B[0, 2]*t114 - B[1, 1]*t70 - B[4, 2]*t40 - B[4, 1]*t67 - B[1, 2]*t42 + B[0, 1]*t127 + B[4, 2]*t111 + B[4, 1]*t130, B[0, 2]*t119 - B[4, 2]*t50 - B[1, 0]*t93 - B[1, 2]*t55 - B[4, 0]*t89 + B[0, 0]*t136 + B[4, 2]*t122 + B[4, 0]*t133, B[0, 2]*t127 - B[1, 1]*t93 - B[4, 2]*t67 - B[1, 2]*t70 - B[4, 1]*t89 + B[0, 1]*t136 + B[4, 2]*t130 + B[4, 1]*t133, B[0, 2]*t136 - B[4, 2]*t89 - B[1, 2]*t93 + B[4, 2]*t133],

[B[0, 0]*t12 - B[0, 0]*t8 - B[5, 0]*t16 + 2*B[1, 0]*B[2, 0]*B[3, 0], B[0, 1]*t12 - B[0, 1]*t8 + B[0, 0]*t21 - B[0, 0]*t31 - B[5, 1]*t16 - B[5, 0]*t29 + 2*B[3, 0]*t139 + 2*B[1, 0]*B[2, 0]*B[3, 1], B[0, 1]*t21 - B[0, 1]*t31 - B[0, 0]*t36 + B[0, 0]*t40 - B[5, 1]*t29 - B[5, 0]*t42 + 2*B[3, 1]*t139 + 2*B[1, 1]*B[2, 1]*B[3, 0], B[0, 1]*t40 - B[0, 1]*t36 - B[5, 1]*t42 + 2*B[1, 1]*B[2, 1]*B[3, 1], B[0, 2]*t12 - B[0, 2]*t8 + B[0, 0]*t50 - B[0, 0]*t57 - B[5, 2]*t16 - B[5, 0]*t55 + 2*B[3, 0]*t142 + 2*B[1, 0]*B[2, 0]*B[3, 2], B[0, 2]*t21 - B[0, 2]*t31 + B[0, 1]*t50 - B[0, 1]*t57 + B[0, 0]*t67 - B[0, 0]*t72 - B[5, 2]*t29 - B[5, 1]*t55 - B[5, 0]*t70 + 2*B[3, 2]*t139 + 2*B[3, 1]*t142 + 2*B[3, 0]*t145, B[0, 2]*t40 - B[0, 2]*t36 + B[0, 1]*t67 - B[0, 1]*t72 - B[5, 2]*t42 - B[5, 1]*t70 + 2*B[3, 1]*t145 + 2*B[1, 1]*B[2, 1]*B[3, 2], B[0, 2]*t50 - B[0, 2]*t57 - B[0, 0]*t85 + B[0, 0]*t89 - B[5, 2]*t55 - B[5, 0]*t93 + 2*B[3, 2]*t142 + 2*B[1, 2]*B[2, 2]*B[3, 0], B[0, 2]*t67 - B[0, 2]*t72 - B[0, 1]*t85 + B[0, 1]*t89 - B[5, 2]*t70 - B[5, 1]*t93 + 2*B[3, 2]*t145 + 2*B[1, 2]*B[2, 2]*B[3, 1], B[0, 2]*t89 - B[0, 2]*t85 - B[5, 2]*t93 + 2*B[1, 2]*B[2, 2]*B[3, 2]],

[B[0, 0]*t16 - B[5, 0]*t12 + B[1, 0]*t100 + B[5, 0]*t97, B[0, 1]*t16 + B[0, 0]*t29 - B[5, 1]*t12 - B[5, 0]*t21 + B[1, 1]*t100 + B[1, 0]*t105 + B[5, 1]*t97 + B[5, 0]*t108, B[0, 1]*t29 + B[0, 0]*t42 - B[5, 1]*t21 - B[5, 0]*t40 + B[1, 1]*t105 + B[1, 0]*t114 + B[5, 1]*t108 + B[5, 0]*t111, B[0, 1]*t42 - B[5, 1]*t40 + B[1, 1]*t114 + B[5, 1]*t111, B[0, 2]*t16 + B[0, 0]*t55 - B[5, 2]*t12 - B[5, 0]*t50 + B[1, 2]*t100 + B[1, 0]*t119 + B[5, 2]*t97 + B[5, 0]*t122, B[0, 2]*t29 + B[0, 1]*t55 + B[0, 0]*t70 - B[5, 2]*t21 - B[5, 1]*t50 + B[1, 2]*t105 - B[5, 0]*t67 + B[1, 1]*t119 + B[1, 0]*t127 + B[5, 2]*t108 + B[5, 1]*t122 + B[5, 0]*t130, B[0, 2]*t42 + B[0, 1]*t70 - B[5, 2]*t40 - B[5, 1]*t67 + B[1, 2]*t114 + B[1, 1]*t127 + B[5, 2]*t111 + B[5, 1]*t130, B[0, 2]*t55 + B[0, 0]*t93 - B[5, 2]*t50 + B[1, 2]*t119 - B[5, 0]*t89 + B[1, 0]*t136 + B[5, 2]*t122 + B[5, 0]*t133, B[0, 2]*t70 + B[0, 1]*t93 - B[5, 2]*t67 + B[1, 2]*t127 - B[5, 1]*t89 + B[1, 1]*t136 + B[5, 2]*t130 + B[5, 1]*t133, B[0, 2]*t93 - B[5, 2]*t89 + B[1, 2]*t136 + B[5, 2]*t133],

[B[3, 0]*t8 + 2*B[3, 0]*t9 - B[3, 0]*t12, B[3, 1]*t8 + 2*B[3, 1]*t9 - B[3, 1]*t12 - B[3, 0]*t21 + B[3, 0]*t31 + 4*B[2, 0]*B[2, 1]*B[3, 0], B[3, 1]*t31 - B[3, 1]*t21 + B[3, 0]*t36 + 2*B[3, 0]*t37 - B[3, 0]*t40 + 4*B[2, 0]*B[2, 1]*B[3, 1], B[3, 1]*t36 + 2*B[3, 1]*t37 - B[3, 1]*t40, B[3, 2]*t8 + 2*B[3, 2]*t9 - B[3, 2]*t12 - B[3, 0]*t50 + B[3, 0]*t57 + 4*B[2, 0]*B[2, 2]*B[3, 0], B[3, 2]*t31 - B[3, 2]*t21 - B[3, 1]*t50 + B[3, 1]*t57 - B[3, 0]*t67 + B[3, 0]*t72 + 4*B[2, 0]*B[2, 1]*B[3, 2] + 4*B[2, 0]*B[2, 2]*B[3, 1] + 4*B[2, 1]*B[2, 2]*B[3, 0], B[3, 2]*t36 + 2*B[3, 2]*t37 - B[3, 2]*t40 - B[3, 1]*t67 + B[3, 1]*t72 + 4*B[2, 1]*B[2, 2]*B[3, 1], B[3, 2]*t57 - B[3, 2]*t50 + B[3, 0]*t85 + 2*B[3, 0]*t86 - B[3, 0]*t89 + 4*B[2, 0]*B[2, 2]*B[3, 2], B[3, 2]*t72 - B[3, 2]*t67 + B[3, 1]*t85 + 2*B[3, 1]*t86 - B[3, 1]*t89 + 4*B[2, 1]*B[2, 2]*B[3, 2], B[3, 2]*t85 + 2*B[3, 2]*t86 - B[3, 2]*t89],

[B[2, 0]*t100 - B[3, 0]*t16, B[2, 1]*t100 - B[3, 0]*t29 - B[3, 1]*t16 + B[2, 0]*t105, B[2, 1]*t105 - B[3, 0]*t42 - B[3, 1]*t29 + B[2, 0]*t114, B[2, 1]*t114 - B[3, 1]*t42, B[2, 2]*t100 - B[3, 0]*t55 - B[3, 2]*t16 + B[2, 0]*t119, B[2, 2]*t105 - B[3, 1]*t55 - B[3, 0]*t70 - B[3, 2]*t29 + B[2, 1]*t119 + B[2, 0]*t127, B[2, 2]*t114 - B[3, 1]*t70 - B[3, 2]*t42 + B[2, 1]*t127, B[2, 2]*t119 - B[3, 0]*t93 - B[3, 2]*t55 + B[2, 0]*t136, B[2, 2]*t127 - B[3, 1]*t93 - B[3, 2]*t70 + B[2, 1]*t136, B[2, 2]*t136 - B[3, 2]*t93]]

    # 가우시안 소거법을 통한 줄 계단 형식 구하기
    G = rref(A)

# x에 대한 액션 행렬 구축
    Ax = np.vstack((-G[[2, 4, 5], 6:10], [0, 1, 0, 0]))

    # 액션 행렬의 고유값 분해
    values, vectors = eig(Ax)
    xsolns = vectors[1, :] / vectors[3, :]
    ysolns = vectors[2, :] / vectors[3, :]

    # 필수 행렬 솔루션 추출
    E = np.zeros((3, 3, 4))
    for i in range(4):
        xysoln = np.array([xsolns[i], ysolns[i], 1])
        e = B @ xysoln
        myE = np.array([[e[0], e[1], e[2]], 
                        [e[1], -e[0], e[3]], 
                        [e[4], e[5], 0]])
        E[:, :, i] = myE / np.linalg.norm(myE)
    return E

def rref(A):
    A = np.array(A, dtype=float)  # 리스트를 NumPy 배열로 변환하고 실수형으로 설정
    rows, cols = A.shape
    lead = 0
    
    for r in range(rows):
        if lead >= cols:
            return A
        
        i = r
        while A[i, lead] == 0:
            i += 1
            if i == rows:
                i = r
                lead += 1
                if cols == lead:
                    return A
        
        A[[i, r]] = A[[r, i]]  # 행 스와핑
        lv = A[r, lead]
        A[r] = A[r] / lv  # 주도원소로 나누기
        
        for i in range(rows):
            if i != r:
                A[i] = A[i] - A[i, lead] * A[r]
        
        lead += 1
    
    return A


